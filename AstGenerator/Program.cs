if (args.Length != 1)
{
    Console.Error.WriteLine("Usage: AstGenerator <output-directory>");
    Environment.Exit(64);
}

string outputDir = args[0];
var types = new List<string>
           {
               "Binary   : Expr Left, Token Op, Expr Right",
               "Grouping : Expr Expression",
               "Literal  : object Value",
               "Unary    : Token Op, Expr Right",
           };
DefineAst(outputDir, types);
DefineVisitor(outputDir, types);

void DefineVisitor(string outDir, List<string> types)
{
    string path = Path.Combine(outDir, "IVisitor.cs");
    var    stream = File.Create(path);
    using var strWriter = new StreamWriter(stream);
    strWriter.WriteLine("// <auto-generated />");
    strWriter.WriteLine("// This file is generated by AstGenerator. Do not edit it manually.");
    strWriter.WriteLine($"using LoxInterpreter.Parser;");
    strWriter.WriteLine($"namespace LoxInterpreter;");
    strWriter.WriteLine("public interface IVisitor<T>");
    strWriter.WriteLine("{");
    foreach (var type in types)
    {
        string className = type.Split(':')[0].Trim();
        strWriter.WriteLine($"   public T Visit{className}({className} {className.ToLower()});");
    }
    
    strWriter.WriteLine("}");
    strWriter.Close();
}

void DefineAst(string outDir, List<string> types)
{
    foreach (var type in types)
    {
        string    className = type.Split(':')[0].Trim();
        string    fields    = type.Split(':')[1].Trim();
        string    path      = Path.Combine(outDir, $"{className}.cs");
        var       stream    =File.Create(path);
        using var strWriter = new StreamWriter(stream);
        strWriter.WriteLine("// <auto-generated />");
        strWriter.WriteLine("// This file is generated by AstGenerator. Do not edit it manually.");
        strWriter.WriteLine($"using LoxInterpreter.Parser;");
        strWriter.WriteLine($"using LoxInterpreter;");
        strWriter.WriteLine($"public class {className}:Expr");
        strWriter.WriteLine("{");

        DefineType(strWriter, fields);
        
        strWriter.WriteLine($"    public override T Accept<T>(IVisitor<T> visitor)");
        strWriter.WriteLine("    {");
        strWriter.WriteLine($"        return visitor.Visit{className}(this);");
        strWriter.WriteLine("    }");
        strWriter.WriteLine("}");
        strWriter.Close();
    }
}
void DefineType(StreamWriter strWriter, string fields)
{
    foreach (var field in fields.Split(','))
    {
        var    parts = field.Trim().Split(' ');
        string type  = parts[0];
        string name  = parts[1];
        strWriter.WriteLine($"    public {type} {name} {{ get; init; }}");
    }
}